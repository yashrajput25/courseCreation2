{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaibh\\\\Desktop\\\\web_dev\\\\Capstone\\\\capstoneProject\\\\frontend\\\\src\\\\components\\\\courseList.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// const CourseList = () => {\n//     const [courses, setCourses] = useState([]);\n\n//     useEffect(() => {\n//         const fetchCourses = async () => {\n//             try {\n//                 const response = await axios.get(\"http://localhost:5001/api/courses/all\");\n//                 setCourses(response.data);\n//             } catch (error) {\n//                 console.error(\"Error fetching courses\", error);\n//             }\n//         };\n//         fetchCourses();\n//     }, []);\n\n//     return (\n//         <div>\n//             <h2>Available Courses</h2>\n//             {courses.length === 0 ? (\n//                 <p>No courses available</p>\n//             ) : (\n//                 courses.map((course) => (\n//                     <div key={course._id} style={{ border: \"1px solid #ddd\", padding: \"10px\", marginBottom: \"20px\" }}>\n//                         <h3>{course.name}</h3>\n\n//                         {/* Display YouTube Playlist if available */}\n//                         {course.playlistUrl ? (\n//                             <iframe\n//                                 width=\"560\"\n//                                 height=\"315\"\n//                                 src={`https://www.youtube.com/embed/videoseries?list=${course.playlistUrl.split(\"list=\")[1]}`}\n//                                 title=\"YouTube Playlist\"\n//                                 frameBorder=\"0\"\n//                                 allowFullScreen\n//                             ></iframe>\n//                         ) : (\n//                             // Otherwise, display individual videos\n//                             course.videos.map((video, index) => {\n//                                 let videoId = \"\";\n\n//                                 // Extract YouTube Video ID from different URL formats\n//                                 if (video.includes(\"youtube.com/watch?v=\")) {\n//                                     videoId = video.split(\"v=\")[1]?.split(\"&\")[0];\n//                                 } else if (video.includes(\"youtu.be/\")) {\n//                                     videoId = video.split(\"youtu.be/\")[1]?.split(\"?\")[0];\n//                                 }\n\n//                                 return videoId ? (\n//                                     <iframe\n//                                         key={index}\n//                                         width=\"300\"\n//                                         height=\"200\"\n//                                         src={`https://www.youtube.com/embed/${videoId}`}\n//                                         title={`YouTube Video ${index + 1}`}\n//                                         frameBorder=\"0\"\n//                                         allowFullScreen\n//                                     ></iframe>\n//                                 ) : (\n//                                     <p key={index} style={{ color: \"red\" }}>\n//                                         Invalid YouTube URL\n//                                     </p>\n//                                 );\n//                             })\n//                         )}\n//                     </div>\n//                 ))\n//             )}\n//         </div>\n//     );\n// };\n\n// export default CourseList;\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../css/CourseList.css\"; // Import CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CourseList = () => {\n  _s();\n  const [courses, setCourses] = useState([]);\n  useEffect(() => {\n    const fetchCourses = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5001/api/courses/all\");\n        setCourses(response.data);\n      } catch (error) {\n        console.error(\"Error fetching courses\", error);\n      }\n    };\n    fetchCourses();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"course-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"heading\",\n      children: \"\\uD83D\\uDCDA Available Courses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), courses.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-courses\",\n      children: \"No courses available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this) : courses.map(course => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"course-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"course-title\",\n        children: course.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this), course.playlistUrl ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n        width: \"100%\",\n        height: \"315\",\n        src: `https://www.youtube.com/embed/videoseries?list=${course.playlistUrl.split(\"list=\")[1]}`,\n        title: \"YouTube Playlist\",\n        frameBorder: \"0\",\n        allowFullScreen: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: course.videos.map((video, index) => {\n          let videoId = \"\";\n\n          // Extract YouTube Video ID from different URL formats\n          if (video.includes(\"youtube.com/watch?v=\")) {\n            var _video$split$;\n            videoId = (_video$split$ = video.split(\"v=\")[1]) === null || _video$split$ === void 0 ? void 0 : _video$split$.split(\"&\")[0];\n          } else if (video.includes(\"youtu.be/\")) {\n            var _video$split$2;\n            videoId = (_video$split$2 = video.split(\"youtu.be/\")[1]) === null || _video$split$2 === void 0 ? void 0 : _video$split$2.split(\"?\")[0];\n          }\n          return videoId ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n            width: \"300\",\n            height: \"200\",\n            src: `https://www.youtube.com/embed/${videoId}`,\n            title: `YouTube Video ${index + 1}`,\n            frameBorder: \"0\",\n            allowFullScreen: true,\n            className: \"video-frame\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"invalid-url\",\n            children: \"\\u274C Invalid YouTube URL\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 41\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 29\n      }, this)]\n    }, course._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(CourseList, \"Ks3haE1eP87BHv/TJ29co0rtnQM=\");\n_c = CourseList;\nexport default CourseList;\nvar _c;\n$RefreshReg$(_c, \"CourseList\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","CourseList","_s","courses","setCourses","fetchCourses","response","get","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","course","name","playlistUrl","width","height","src","split","title","frameBorder","allowFullScreen","videos","video","index","videoId","includes","_video$split$","_video$split$2","_id","_c","$RefreshReg$"],"sources":["C:/Users/vaibh/Desktop/web_dev/Capstone/capstoneProject/frontend/src/components/courseList.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const CourseList = () => {\r\n//     const [courses, setCourses] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         const fetchCourses = async () => {\r\n//             try {\r\n//                 const response = await axios.get(\"http://localhost:5001/api/courses/all\");\r\n//                 setCourses(response.data);\r\n//             } catch (error) {\r\n//                 console.error(\"Error fetching courses\", error);\r\n//             }\r\n//         };\r\n//         fetchCourses();\r\n//     }, []);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Available Courses</h2>\r\n//             {courses.length === 0 ? (\r\n//                 <p>No courses available</p>\r\n//             ) : (\r\n//                 courses.map((course) => (\r\n//                     <div key={course._id} style={{ border: \"1px solid #ddd\", padding: \"10px\", marginBottom: \"20px\" }}>\r\n//                         <h3>{course.name}</h3>\r\n\r\n//                         {/* Display YouTube Playlist if available */}\r\n//                         {course.playlistUrl ? (\r\n//                             <iframe\r\n//                                 width=\"560\"\r\n//                                 height=\"315\"\r\n//                                 src={`https://www.youtube.com/embed/videoseries?list=${course.playlistUrl.split(\"list=\")[1]}`}\r\n//                                 title=\"YouTube Playlist\"\r\n//                                 frameBorder=\"0\"\r\n//                                 allowFullScreen\r\n//                             ></iframe>\r\n//                         ) : (\r\n//                             // Otherwise, display individual videos\r\n//                             course.videos.map((video, index) => {\r\n//                                 let videoId = \"\";\r\n\r\n//                                 // Extract YouTube Video ID from different URL formats\r\n//                                 if (video.includes(\"youtube.com/watch?v=\")) {\r\n//                                     videoId = video.split(\"v=\")[1]?.split(\"&\")[0];\r\n//                                 } else if (video.includes(\"youtu.be/\")) {\r\n//                                     videoId = video.split(\"youtu.be/\")[1]?.split(\"?\")[0];\r\n//                                 }\r\n\r\n//                                 return videoId ? (\r\n//                                     <iframe\r\n//                                         key={index}\r\n//                                         width=\"300\"\r\n//                                         height=\"200\"\r\n//                                         src={`https://www.youtube.com/embed/${videoId}`}\r\n//                                         title={`YouTube Video ${index + 1}`}\r\n//                                         frameBorder=\"0\"\r\n//                                         allowFullScreen\r\n//                                     ></iframe>\r\n//                                 ) : (\r\n//                                     <p key={index} style={{ color: \"red\" }}>\r\n//                                         Invalid YouTube URL\r\n//                                     </p>\r\n//                                 );\r\n//                             })\r\n//                         )}\r\n//                     </div>\r\n//                 ))\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default CourseList;\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../css/CourseList.css\"; // Import CSS for styling\r\n\r\nconst CourseList = () => {\r\n    const [courses, setCourses] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCourses = async () => {\r\n            try {\r\n                const response = await axios.get(\"http://localhost:5001/api/courses/all\");\r\n                setCourses(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching courses\", error);\r\n            }\r\n        };\r\n        fetchCourses();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"course-container\">\r\n            <h2 className=\"heading\">📚 Available Courses</h2>\r\n            {courses.length === 0 ? (\r\n                <p className=\"no-courses\">No courses available</p>\r\n            ) : (\r\n                courses.map((course) => (\r\n                    <div key={course._id} className=\"course-card\">\r\n                        <h3 className=\"course-title\">{course.name}</h3>\r\n\r\n                        {/* Display YouTube Playlist if available */}\r\n                        {course.playlistUrl ? (\r\n                            <iframe\r\n                                width=\"100%\"\r\n                                height=\"315\"\r\n                                src={`https://www.youtube.com/embed/videoseries?list=${course.playlistUrl.split(\"list=\")[1]}`}\r\n                                title=\"YouTube Playlist\"\r\n                                frameBorder=\"0\"\r\n                                allowFullScreen\r\n                            ></iframe>\r\n                        ) : (\r\n                            <div className=\"video-container\">\r\n                                {course.videos.map((video, index) => {\r\n                                    let videoId = \"\";\r\n\r\n                                    // Extract YouTube Video ID from different URL formats\r\n                                    if (video.includes(\"youtube.com/watch?v=\")) {\r\n                                        videoId = video.split(\"v=\")[1]?.split(\"&\")[0];\r\n                                    } else if (video.includes(\"youtu.be/\")) {\r\n                                        videoId = video.split(\"youtu.be/\")[1]?.split(\"?\")[0];\r\n                                    }\r\n\r\n                                    return videoId ? (\r\n                                        <iframe\r\n                                            key={index}\r\n                                            width=\"300\"\r\n                                            height=\"200\"\r\n                                            src={`https://www.youtube.com/embed/${videoId}`}\r\n                                            title={`YouTube Video ${index + 1}`}\r\n                                            frameBorder=\"0\"\r\n                                            allowFullScreen\r\n                                            className=\"video-frame\"\r\n                                        ></iframe>\r\n                                    ) : (\r\n                                        <p key={index} className=\"invalid-url\">\r\n                                            ❌ Invalid YouTube URL\r\n                                        </p>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourseList;\r\n\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZ,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,uCAAuC,CAAC;QACzEH,UAAU,CAACE,QAAQ,CAACE,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IACDJ,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA;IAAKW,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BZ,OAAA;MAAIW,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChDb,OAAO,CAACc,MAAM,KAAK,CAAC,gBACjBjB,OAAA;MAAGW,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAElDb,OAAO,CAACe,GAAG,CAAEC,MAAM,iBACfnB,OAAA;MAAsBW,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACzCZ,OAAA;QAAIW,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAEO,MAAM,CAACC;MAAI;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAG9CG,MAAM,CAACE,WAAW,gBACfrB,OAAA;QACIsB,KAAK,EAAC,MAAM;QACZC,MAAM,EAAC,KAAK;QACZC,GAAG,EAAE,kDAAkDL,MAAM,CAACE,WAAW,CAACI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAG;QAC9FC,KAAK,EAAC,kBAAkB;QACxBC,WAAW,EAAC,GAAG;QACfC,eAAe;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,gBAEVhB,OAAA;QAAKW,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAC3BO,MAAM,CAACU,MAAM,CAACX,GAAG,CAAC,CAACY,KAAK,EAAEC,KAAK,KAAK;UACjC,IAAIC,OAAO,GAAG,EAAE;;UAEhB;UACA,IAAIF,KAAK,CAACG,QAAQ,CAAC,sBAAsB,CAAC,EAAE;YAAA,IAAAC,aAAA;YACxCF,OAAO,IAAAE,aAAA,GAAGJ,KAAK,CAACL,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAAS,aAAA,uBAApBA,aAAA,CAAsBT,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACjD,CAAC,MAAM,IAAIK,KAAK,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE;YAAA,IAAAE,cAAA;YACpCH,OAAO,IAAAG,cAAA,GAAGL,KAAK,CAACL,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,cAAAU,cAAA,uBAA3BA,cAAA,CAA6BV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACxD;UAEA,OAAOO,OAAO,gBACVhC,OAAA;YAEIsB,KAAK,EAAC,KAAK;YACXC,MAAM,EAAC,KAAK;YACZC,GAAG,EAAE,iCAAiCQ,OAAO,EAAG;YAChDN,KAAK,EAAE,iBAAiBK,KAAK,GAAG,CAAC,EAAG;YACpCJ,WAAW,EAAC,GAAG;YACfC,eAAe;YACfjB,SAAS,EAAC;UAAa,GAPlBoB,KAAK;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQL,CAAC,gBAEVhB,OAAA;YAAeW,SAAS,EAAC,aAAa;YAAAC,QAAA,EAAC;UAEvC,GAFQmB,KAAK;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACN;QACL,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR;IAAA,GA3CKG,MAAM,CAACiB,GAAG;MAAAvB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA4Cf,CACR,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACd,EAAA,CAvEID,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAyEhB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}